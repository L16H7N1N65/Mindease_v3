services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mindease-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mindease}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mindease_password}
      POSTGRES_DB: ${POSTGRES_DB:-mindease_db}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - mindease-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mindease"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mindease-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mindease-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: ./backend/mindease-api
      dockerfile: Dockerfile
    container_name: mindease-backend
    environment:
      - DATABASE_URL=postgresql://mindease:mindease_password@postgres:5432/mindease_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_here}
      - MISTRAL_SERVICE_URL=http://mistral-service:5000
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://localhost:3000}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - mindease-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Mistral LLM Service
  mistral-service:
    build:
      context: ./backend/mistral-service
      dockerfile: Dockerfile
    container_name: mindease-mistral
    environment:
      - MISTRAL_API_KEY=${MISTRAL_API_KEY:-your_mistral_api_key}
      - MODEL_NAME=${MODEL_NAME:-mistral-large-latest}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "5000:5000"
    networks:
      - mindease-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend/mindease-web
      dockerfile: Dockerfile
    container_name: mindease-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_ENVIRONMENT=${ENVIRONMENT:-production}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your_nextauth_secret}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mindease-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # SonarQube for Code Quality
  sonarqube:
    image: sonarqube:10.3-community
    container_name: mindease-sonarqube
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube_db
      - SONAR_JDBC_USERNAME=${POSTGRES_USER:-mindease}
      - SONAR_JDBC_PASSWORD=${POSTGRES_PASSWORD:-mindease_password}
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - mindease-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: mindease-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mindease-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mindease-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mindease-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mindease-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/mindease.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/mindease-web/public:/var/www/mindease/static
      - ./nginx/error_pages:/var/www/mindease/error_pages
    depends_on:
      - frontend
      - backend
      - mistral-service
    networks:
      - mindease-network
    restart: unless-stopped

networks:
  mindease-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  prometheus_data:
  grafana_data:

