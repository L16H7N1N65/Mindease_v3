name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # Backend Tests and Quality
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/mindease-api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: backend/mindease-api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov safety bandit

    - name: Run security checks
      working-directory: backend/mindease-api
      run: |
        # Check for known security vulnerabilities
        safety check --json --output safety-report.json || true
        
        # Run static security analysis
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run backend tests
      working-directory: backend/mindease-api
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key
        ENVIRONMENT: testing
      run: |
        pytest app/tests/ --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/mindease-api/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Quality
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/mindease-web/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend/mindease-web
      run: |
        npm ci
        npm audit --audit-level=high

    - name: Run frontend linting
      working-directory: frontend/mindease-web
      run: npm run lint

    - name: Run frontend tests
      working-directory: frontend/mindease-web
      run: npm run test -- --coverage --watchAll=false

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/mindease-web/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # SonarCloud Analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        # Backend dependencies
        cd backend/mindease-api
        pip install -r requirements.txt
        pip install pytest-cov
        cd ../..
        
        # Frontend dependencies
        cd frontend/mindease-web
        npm ci
        cd ../..

    - name: Run tests for coverage
      env:
        DATABASE_URL: sqlite:///test.db
        SECRET_KEY: test_secret_key
        ENVIRONMENT: testing
      run: |
        # Backend tests
        cd backend/mindease-api
        pytest app/tests/ --cov=app --cov-report=xml
        cd ../..
        
        # Frontend tests
        cd frontend/mindease-web
        npm run test -- --coverage --watchAll=false
        cd ../..

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Docker Build and Push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, sonarcloud]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: backend/mindease-api
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mindease-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/mindease-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: frontend/mindease-web
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mindease-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/mindease-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Quality Gate Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [sonarcloud, security-scan]

    steps:
    - name: Check SonarCloud Quality Gate
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Quality Gate Status
      run: |
        echo "Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
        if [ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" != "PASSED" ]; then
          echo "Quality Gate failed"
          exit 1
        fi
