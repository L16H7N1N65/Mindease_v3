name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      working-directory: backend/mindease-api
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Python Security Scan - Safety
      working-directory: backend/mindease-api
      run: |
        safety check --json --output safety-report.json
        safety check --short-report

    - name: Python Security Scan - Bandit
      working-directory: backend/mindease-api
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ -f txt

    - name: Python Security Scan - Semgrep
      working-directory: backend/mindease-api
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json
        semgrep --config=auto app/

    - name: Install Node.js dependencies
      working-directory: frontend/mindease-web
      run: npm ci

    - name: Node.js Security Scan - npm audit
      working-directory: frontend/mindease-web
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/mindease-api/safety-report.json
          backend/mindease-api/bandit-report.json
          backend/mindease-api/semgrep-report.json
          frontend/mindease-web/npm-audit-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build backend image
      run: |
        docker build -t mindease-backend:test backend/mindease-api/

    - name: Build frontend image
      run: |
        docker build -t mindease-frontend:test frontend/mindease-web/

    - name: Run Trivy scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mindease-backend:test'
        format: 'sarif'
        output: 'trivy-backend.sarif'

    - name: Run Trivy scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mindease-frontend:test'
        format: 'sarif'
        output: 'trivy-frontend.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-backend.sarif
          trivy-frontend.sarif

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose,github_actions
        output_format: sarif
        output_file_path: checkov-report.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-report.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secrets-scan, infrastructure-scan]
    if: always()

    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: security-reports/

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Dependency Scan Results" >> security-summary.md
        if [ -f security-reports/safety-report.json ]; then
          echo "- Python dependencies scanned with Safety" >> security-summary.md
        fi
        if [ -f security-reports/npm-audit-report.json ]; then
          echo "- Node.js dependencies scanned with npm audit" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Container Scan Results" >> security-summary.md
        echo "- Docker images scanned with Trivy" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "## Code Scan Results" >> security-summary.md
        echo "- Python code scanned with Bandit and Semgrep" >> security-summary.md
        echo "- Secrets scanned with TruffleHog and GitLeaks" >> security-summary.md
        echo "- Infrastructure scanned with Checkov" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

