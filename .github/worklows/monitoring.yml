name: Monitoring & Alerts

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:  # Manual trigger

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest

    steps:
    - name: Check Production Health
      run: |
        # API Health Check
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/health)
        if [ $response -ne 200 ]; then
          echo "‚ùå API health check failed with status: $response"
          exit 1
        fi
        echo "‚úÖ API health check passed"

        # Database Health Check
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/api/v1/health/db)
        if [ $response -ne 200 ]; then
          echo "‚ùå Database health check failed with status: $response"
          exit 1
        fi
        echo "‚úÖ Database health check passed"

        # Frontend Health Check
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }})
        if [ $response -ne 200 ]; then
          echo "‚ùå Frontend health check failed with status: $response"
          exit 1
        fi
        echo "‚úÖ Frontend health check passed"

    - name: Check Staging Health
      run: |
        # Similar checks for staging environment
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.STAGING_URL }}/health)
        if [ $response -ne 200 ]; then
          echo "‚ö†Ô∏è Staging health check failed with status: $response"
        else
          echo "‚úÖ Staging health check passed"
        fi

    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "üö® MindEase health check failed! Immediate attention required."
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest

    steps:
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.PRODUCTION_URL }}
          ${{ secrets.PRODUCTION_URL }}/dashboard
        configPath: '.github/lighthouse/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Load Testing
      run: |
        # Install k6
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

        # Run load test
        k6 run --vus 10 --duration 30s - <<EOF
        import http from 'k6/http';
        import { check } from 'k6';

        export default function() {
          let response = http.get('${{ secrets.PRODUCTION_URL }}/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF

  ssl-check:
    name: SSL Certificate Check
    runs-on: ubuntu-latest

    steps:
    - name: Check SSL Certificate
      run: |
        # Check SSL certificate expiration
        domain=$(echo ${{ secrets.PRODUCTION_URL }} | sed 's|https://||' | sed 's|/.*||')
        expiry_date=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
        expiry_epoch=$(date -d "$expiry_date" +%s)
        current_epoch=$(date +%s)
        days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))

        echo "SSL certificate expires in $days_until_expiry days"

        if [ $days_until_expiry -lt 30 ]; then
          echo "‚ö†Ô∏è SSL certificate expires in less than 30 days!"
          exit 1
        fi

    - name: Notify SSL expiry warning
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: "‚ö†Ô∏è MindEase SSL certificate expires soon! Please renew."
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  backup-check:
    name: Backup Verification
    runs-on: ubuntu-latest

    steps:
    - name: Verify Database Backups
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Check if recent backup exists
          backup_file=$(ls -t /opt/mindease/backups/backup_*.sql 2>/dev/null | head -1)
          if [ -z "$backup_file" ]; then
            echo "‚ùå No database backup found!"
            exit 1
          fi

          # Check backup age (should be less than 24 hours)
          backup_age=$(stat -c %Y "$backup_file")
          current_time=$(date +%s)
          age_hours=$(( (current_time - backup_age) / 3600 ))

          if [ $age_hours -gt 24 ]; then
            echo "‚ùå Database backup is older than 24 hours!"
            exit 1
          fi

          echo "‚úÖ Database backup is recent (${age_hours} hours old)"

    - name: Notify backup failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "üö® MindEase database backup verification failed!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest

    steps:
    - name: Check for Failed Login Attempts
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Check application logs for failed login attempts
          failed_logins=$(docker logs mindease-backend --since 1h 2>&1 | grep -c "Failed login attempt" || echo "0")
          
          if [ $failed_logins -gt 50 ]; then
            echo "‚ö†Ô∏è High number of failed login attempts: $failed_logins"
            exit 1
          fi
          
          echo "‚úÖ Failed login attempts within normal range: $failed_logins"

    - name: Check System Resources
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Check CPU usage
          cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
          if (( $(echo "$cpu_usage > 80" | bc -l) )); then
            echo "‚ö†Ô∏è High CPU usage: ${cpu_usage}%"
          fi

          # Check memory usage
          mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
          if (( $(echo "$mem_usage > 80" | bc -l) )); then
            echo "‚ö†Ô∏è High memory usage: ${mem_usage}%"
          fi

          # Check disk usage
          disk_usage=$(df -h / | awk 'NR==2 {print $5}' | cut -d'%' -f1)
          if [ $disk_usage -gt 80 ]; then
            echo "‚ö†Ô∏è High disk usage: ${disk_usage}%"
          fi

    - name: Notify security alerts
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: "‚ö†Ô∏è MindEase security monitoring detected anomalies!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  generate-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, ssl-check, backup-check, security-monitoring]
    if: always()

    steps:
    - name: Generate Report
      run: |
        echo "# MindEase Monitoring Report" > monitoring-report.md
        echo "Generated on: $(date)" >> monitoring-report.md
        echo "" >> monitoring-report.md
        
        echo "## Health Checks" >> monitoring-report.md
        echo "- Health Check: ${{ needs.health-check.result }}" >> monitoring-report.md
        echo "- Performance Check: ${{ needs.performance-check.result }}" >> monitoring-report.md
        echo "- SSL Check: ${{ needs.ssl-check.result }}" >> monitoring-report.md
        echo "- Backup Check: ${{ needs.backup-check.result }}" >> monitoring-report.md
        echo "- Security Monitoring: ${{ needs.security-monitoring.result }}" >> monitoring-report.md

    - name: Upload Report
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-report
        path: monitoring-report.md

    - name: Send Daily Summary
      if: github.event.schedule == '0 8 * * *'  # Daily at 8 AM
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "üìä MindEase Daily Monitoring Summary",
            attachments: [{
              color: "good",
              fields: [{
                title: "System Status",
                value: "All systems operational ‚úÖ",
                short: true
              }]
            }]
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}